
@using MyNoddyStore.Entities
@model MyNoddyStore.Models.ProductsListViewModel
@Scripts.Render("~/Scripts/jquery-3.3.1.js")
@{
    ViewBag.Title = "Products";
}

@foreach (var pr in Model.Products)
{
    //@Html.Partial("ProductSummary", pr)
    @Html.Partial("ProductSummary", pr, new ViewDataDictionary { {"pageNumber", Model.PagingInfo.CurrentPage },
                                                                 {"categoryString", Model.CurrentCategory }})//we are adding the current page and category to each partial view
}
<div class="btn-group pull-right">
    @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new { category = Model.CurrentCategory, page = x }))
</div>

@*This script manipulates product items on the page. Whereas it may seem more pertinent to add this script per ProductSummary partial-view form, in practice
    that may cause issues with multiple events being bound to the forms (one for each time a child form is loaded) *@
<script type="text/javascript">

    const successMessage = "Updated";
    const maxCartLineItemLimit = 5;
    var modelProducts; // initial products in cart

    $('.plus-btn').on('click', function (e) {
        e.preventDefault();
        var $this = $(this);
        var $input = $this.closest('div').find('input');
        var value = parseInt($input.val());
        var thisProdId = GetProductId($this);
        var currentStock = GetCurrentStock(thisProdId);
        var myQuantity = GetMyQuantity(thisProdId);

        if (value < maxCartLineItemLimit) {        // max quantity value allowed is declared as a const
            //add up to the available stock only
            if (value - myQuantity < currentStock) {
                value = value + 1;
            } else {
                DisplayNoStockMessage($this);
            }

        } else {
            DisplayMaxLimitMessage($this);
            value = maxCartLineItemLimit;
        }
        $input.val(value);
        ResetLocalUpdateButton($this);
    });

    $('.minus-btn').on('click', function (e) {
        e.preventDefault();
        var $this = $(this);
        var $input = $this.closest('div').find('input');
        var value = parseInt($input.val());

        if (value > 1) {        // min quantity value allowed is 0
            value = value - 1;
        } else {
            value = 0;
        }
        $input.val(value);
        ResetLocalUpdateButton($this);
    });


    //Set local Update button to be enabled/disabled as necessary.
    function ResetLocalUpdateButton(localElement) {

        var currentQuantity = parseInt(localElement.closest('div').find('input').val()); //this is the number of items now selected.
        var thisProdId = GetProductId(localElement);
        var cartQuantity = modelProducts.find(x => x.ProductID == thisProdId).MyQuantity; //this is the number of items in cart model originally.
        var thisUpdateButton = localElement.closest('div.quantity').siblings().find("input[name='submitUpdate']");

        //if current quantity differs from the original value, then the cart value needs to be updated - otherwise the update button should be disabled.
        if (currentQuantity == cartQuantity) {
            $(thisUpdateButton).attr('disabled', 'disabled');
            //$(thisUpdateButton).prop('disabled', true);   //boolean [attr]ibutes and [prop]erties are treated similarly in JQuery. So this code also works.
        } else {
            $(thisUpdateButton).removeAttr('disabled');
            //thisUpdateButton.removeAttr('disabled');     //we could call the JQuery method on a Js element directly. This code also works
        }
    }

    function GetProductId(localElement) {
        return localElement.closest('div.quantity').siblings().find("input[name='ProductID']").val();
    }

    function GetCurrentStock(ProductId) {
        return modelProducts.find(x => x.ProductID == ProductId).StockCount;
    }

    function GetMyQuantity(ProductId) {
        return modelProducts.find(x => x.ProductID == ProductId).MyQuantity;
    }

    //For each Update button on screen, set the initial state to disabled.
    function DisableAllUpdateButtons() {
        var buttons = document.getElementsByName("submitUpdate");
        var i;
        for (i = 0; i < buttons.length; i++) {
            buttons[i].disabled = 'disabled';}
    }

    $(document).ready(function () {
        modelProducts =  @Html.Raw(Json.Encode(Model.Products));
        DisableAllUpdateButtons();
        DisplayUpdateMessage();
        CheckToEnableViewCartButton();
    });

    function DisplayMaxLimitMessage(localElement) {

        var targetProductId = $(localElement.closest("div[name='mainchilddiv']")).find("input[name='ProductID']").val();

        if (targetProductId != 0) {
            ShowMessage(targetProductId, "Maximum limit");
        }
        //reset any values
        targetProductId = 0;
    }

    function DisplayNoStockMessage(localElement) {

        var targetProductId = $(localElement.closest("div[name='mainchilddiv']")).find("input[name='ProductID']").val();

        if (targetProductId != 0) {
            ShowMessage(targetProductId, "No more stock");
        }
        //reset any values
        targetProductId = 0;
    }

    function ShowMessage(targetProductId, msg) {
        //disable all other status message controls and enable the local one corresponding to this update button.
        var elements = document.getElementsByClassName("stock-message");
        var i;
        for (i = 0; i < elements.length; i++) {

            //find the corresponding product id
            var localProdId = $(elements[i].closest("div[name='mainchilddiv']")).find("input[name='ProductID']").val();
            if (localProdId == targetProductId) {
                elements[i].setAttribute("style", "display:inline");
            } else {
                elements[i].setAttribute("style", "display:none");
            }
        }
        //Call the JQuery function that flashes our message.
        $('.stock-message').flash_fast_message({
            text: msg,
            how: 'append'
        });
    }

    function DisplayUpdateMessage() {

        var updatedMsg = '@Model.UpdatedMessage';
        var updatedProductId = '@Model.UpdatedProductId';

        if (updatedMsg != "" && updatedProductId != 0) { //we can only show a message that exists for a valid product id, so both params are necessary.
            ShowCartUpdateStatusMessage(updatedProductId, updatedMsg);
        }
        //clear any values
        updatedMsg = "";
        updatedProductId = 0;
    }

    function ShowCartUpdateStatusMessage(targetProductId, message) {
        //disable all other status message controls and enable the local one corresponding to this update button.
        var elements = document.getElementsByClassName("status-message");
        var i;
        for (i = 0; i < elements.length; i++) {

            //find the corresponding product id
            var localProdId = $(elements[i].closest("div[name='mainchilddiv']")).find("input[name='ProductID']").val();
            if (localProdId == targetProductId) {
                elements[i].setAttribute("style", "display:inline");

                //make the message red or green depending on success or failure.
                if (message == successMessage) {
                    $(elements[i]).removeClass("redmessage")
                } else {
                    $(elements[i]).addClass("redmessage");
                }
            } else {
                elements[i].setAttribute("style", "display:none");
            }
        }

        //Call the JQuery function that flashes our message.
        $('.status-message').flash_message({
            text: message,
            how: 'append'
        });
    }

    //On this screen we enable the View Cart button on the main navbar (it is disabled by default using the Bootstrap "disabled" class).
    function CheckToEnableViewCartButton() {
        var wrapperElement = document.getElementById('summaryCartBtnWrapper');
        var anchorElement = wrapperElement.getElementsByTagName('a')[0];
        anchorElement.classList.remove("disabled");
    }

//#region JQuery flashMessage
    (function ($) {
            $.fn.flash_message = function (options) {

                options = $.extend({
                    text: 'Done',
                    time: 1000,
                    how: 'before',
                    class_name: ''
                }, options);

                return $(this).each(function () {
                    if ($(this).parent().find('.flash_message').get(0))
                        return;

                    var message = $('<span />', {
                        'class': 'flash_message ' + options.class_name,
                        text: options.text
                    }).hide().fadeIn('fast');

                    $(this)[options.how](message);

                    message.delay(options.time).fadeOut('normal', function () {
                        $(this).remove();
                    });

                });
            };
    })(jQuery);

    (function ($) {
        $.fn.flash_fast_message = function (options) {

            options = $.extend({
                text: 'Done',
                time: 200,
                how: 'before',
                class_name: ''
            }, options);

            return $(this).each(function () {
                if ($(this).parent().find('.flash_fast_message').get(0))
                    return;

                var message = $('<span />', {
                    'class': 'flash_fast_message ' + options.class_name,
                    text: options.text
                }).hide().fadeIn('fast');

                $(this)[options.how](message);

                message.delay(options.time).fadeOut('normal', function () {
                    $(this).remove();
                });

            });
        };
    })(jQuery);


//#endregion

</script>


