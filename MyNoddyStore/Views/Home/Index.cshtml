@{
    ViewBag.Title = "Home Page";
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="~/Content/Site.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.3.1.js"></script>
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    <link rel="icon" href="~/favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" href="~/favicon.ico" type="image/x-icon" />
</head>
<body>
    <main class="wrapper">
        <div class="heading myUserFontColor">
            <img src="~/images/logo.png" alt="logo" class="logo">
            <h1>MyNoddy MVC Supermarket Sweep</h1>
            <h2>A single-player shopping game.</h2>
        </div>

        <section class="game-intro">
            <p>
                A simple game to showcase an online supermarket created using MVC architecture. Fill your cart in the time available and checkout before the time expires.
                There is a limited stock of some items and you will be competing against the in-house NPC shopping-bot.
                If the value of your cart exceeds the value of the shopping-bot's cart, you win a visual prize!
            </p>
        </section>

        <div class="container-row">
            <img src="~/images/cartoon1.jpg" alt="cartoon" class="cartoon">
            <div id="btn-grp-wrapper">
                <div class="btn-grp">
                    <div id="whiteClockWrapperId" class="whiteClockWrapper btn-grp-item">
                        <div class="innerWhiteClockWrapper">
                            <span id="countdownClockWhiteBg"></span>
                        </div>
                    </div>

                    <div class="btn-grp-item">
                        @Html.ActionLink(linkText: "Continue", actionName: "List", controllerName: "Product", routeValues: null, htmlAttributes: new { @class = "btn btn-primary continuebtn" })
                    </div>

                    <div class="btn-grp-item">
                        @Html.ActionLink(linkText: "Start", actionName: "Restart", controllerName: "Product", routeValues: null, htmlAttributes: new { @class = "btn btn-primary startbtn" })
                    </div>
                </div>
            </div>
        </div>


        <div class="landing-content">
            <h3>Game Instructions</h3>
            <ul>
                <li>
                    Use the Plus (<span class="fa fa-plus" style="font-size:12px"></span>) and Update buttons in combination to add items to your cart.
                </li>
                <li>Only items in stock can be added, and there is a limit per item line.</li>
                <li>Click Checkout before the time expires.</li>
            </ul>

            <h3>Hints and Tips</h3>
            <ul>
                <li>Add high-value items as soon as you see them (the NPC shopping-bot competes for these items).</li>
                <li>The ability to remove items from your cart is available for demo, but has no purpose in the game.</li>
                <li>You can inspect your cart at any time. A summary of the shopping-bot's cart value is also shown.</li>
                <li>If you checkout early, the game will simulate the shopping-bot completing their turn.</li>
                <li>You can continue shopping after the time expires, but then the game is lost on checkout.</li>
                <li>So long as you checkout within the available time on your browser, the game allows for a (short) delay in connecting to the game server.</li>
            </ul>

            <!-- #region discussion and credits -->
            <div class="toggle-button-container">
                <input type="button" id="toggleDiscBut" class="btn btn-info" value="Show Tech Discussion" onclick="ShowHideDiscussion()" />
            </div>
            <section class="tech-discussion" style="display:none;">
                <h3>Game Discussion</h3>
                <p>
                    View source code on <a href="https://github.com/Sajeewa-Dissa/mynoddy-supermarket-sweep">Github <span class="fa fa-github" style="font-size:24px"></span></a>.
                </p>
                <p>
                    This shopping game is an MVC 5 web application built using C# in Asp.Net Framework 4.6. It consists of this Home page, two in-game pages created using the MVC architecture and a results page.
                    The MVC pages themselves combine various layout pages and partial views and their client-side content changes via media queries to create a fully responsive website.
                </p>
                <p>
                    The online store is based on an example in <cite>Pro ASP.NET MVC 5</cite> by Adam Freeman 2013. This uses a simple Repository pattern to add items to a cart in an online store.
                    It uses Bootstrap v3 classes to style elements for display as well as showing some output as pure HTML tables. The original example also made extensive use of the Bootstrap classes for responsive layout and also for creating
                    flexbox layouts with the standard Bootstrap page structure. Those extra features have been removed and replaced here.
                </p>
                <p>
                    Also removed from this example is the use of a database context, for reasons detailed below.
                    This example has also replaced Ninject with MS Unity as the Dependency Injector (DI) package for creating the Entity Framework context object.
                </p>
                <p>
                    The code makes use of the fundamentals of MVC; Entity Framework and DI, object-model binding for persisting data across HTTP calls, paging classes to aid in navigation and routing,
                    utility classes for the numerous helper-methods required and a number of view-models to be sent to pages and partial pages.
                </p>

                <h4>Changes to the original design</h4>
                <p>
                    The original design used a simple Repository pattern that adds only one item to a cart at a time, unsuitable for our needs.
                    The design also used a SQL Server Database context in which the products for sale were listed in a table.
                    However, it lacked any concept of a stock-count from which items could be subtracted.
                </p>
                <p>
                    Hosting a database online would imply a cost, and adding a stock table would require a reset of data at the start of each game,
                    so for this game, we have replaced the DB with a context object which creates an in-memory list of products on demand.
                    This object has new classes and properties to allow the simulated management of stock-counts.
                </p>
                <p>
                    The repository pattern has also been updated to add multiple items to the shopping cart per request, via new plus/minus buttons to complement the Update button.
                    A number of client-side messages also display via JavaScript fade-in and fade-out to give a richer UX. This game also adds images to the products on sale.
                </p>
                <p>
                    The Bootstrap version 3.4.0 used by the original website in pretty old now, and rather than upgrading it, the float layout and responsive features have been supplanted with grid displays
                    and direct styling with CSS media queries respectively. The Bootstrap classes are used for styling basic elements. The game also introduces results tables with rotating headings
                    to allow for full info display on mobile devices.
                </p>

                <h4>Changing a shopping website into a shopping game</h4>
                <p>
                    The simple online shop example was turned into a game as a technical exercise, and the game's name reflects the ambition of this effort.
                    However, it caused a number of interesting technical challenges. The concept of a shopping-bot introduces questions about AI and thread-management:
                    an actual shopping bot would live on its own thread and act as an independent entity, but for a single-player game, this extra work is unnecessary.
                </p>
                <p>
                    Instead, the controller uses in-proc methods to simulate how much shopping the "bot" is required to do based on the time
                    elapsed since the last user request. In order to make the shopping game competitive and interactive, the game <i>interrupts</i> each user request to buy items for the robot as well.
                    This is reflected in a simple page refresh, which would show the product stock count diminishing slowly as the bot buys up items across the product pages. This also means that AJAX is not required,
                    a user request to buy an item on the page will update all products on the page according to both the user and bot activity. Automatic page refresh was considered unnecessary
                    because the user is expected to make requests every few seconds in normal game-play.
                </p>
                <p>
                    Finally, the MVC pages were separated out from the home page and results page because these don't follow the natural layout and navigation patterns that MVC uses.
                    As such, these two pages don't have a master layout and have their own dedicated stylesheets devoid of Bootstrap.
                </p>

                <h4>Coding an AI behaviour</h4>
                <p>
                    For a trivial game, it is unnecessary to spend time coding a complex shopping-bot AI. However, a set of rules have been added to simulate some intelligent behaviour,
                    to make the gameplay challenging (but not too difficult). Here are a few details (all numbers specified are configurable):
                    <ul>
                        <li>The user is given a 5 second head start before the bot commences shopping</li>
                        <li>The bot buys one item per second, and only one item per line at a time</li>
                        <li>The bot begins by selecting the ten most expensive items in stock and only ever selects from half of these (odd or even) randomly</li>
                        <li>In addition, the bot will look at what the user has added to their cart and copy that selection, if stock is available</li>
                        <li>If the bot has nothing available to buy because the limits per item have been reached or stock is exhausted, it will start buying items randomly and in bulk (these may turn out to be high or low value items)</li>
                        <li>The bot will always complete the game in time and buy their full allocation of items.</li>
                    </ul>
                </p>

                <h4>Extending the game further</h4>
                <p>
                    All the gameplay shown in this game could be coded on client-side alone; we only use MVC architecture as an exercise. However, the server-side code can form the basis of a multiplayer game
                    where users compete against each other and the clock. Again, an MVC controller (remember this is an MVC singleton) would run this code. Or we could also replace the context
                    with an actual DB and shop for real, although this would require the addition of actual stock tables and a complete checkout mechanism.
                </p>
            </section>
            <div class="toggle-button-container">
                <input type="button" id="toggleCredBut" class="btn btn-info" value="Show Game Credits" onclick="ShowHideCredits()" />
            </div>
            <section class="game-credits" style="display:none;">
                <h3>Game Credits</h3>
                <p>The online store is based on an example in <cite>Pro ASP.NET MVC 5</cite> by Adam Freeman 2013, published by <a href="https://www.apress.com/gp/book/9781430265290">APRESS</a>.</p>

                <p>The win-condition animation on the results screen is based on <cite>sketch.js</cite> and its associated worked-example by Justin Windle. The Codepen is linked <a href="https://codepen.io/soulwire/pen/foktm">here</a>.</p>
             </section>
            <!-- #endregion -->
        </div>

</main>
    <footer>
        <p>&copy; Sajeewa Dissanayake 2019. Made with ❤ and Visual Studio.</p>
    </footer>


    <script>
    var countdownCtrl = document.getElementById("countdownClockWhiteBg");
    var countdownCtrlBorder = document.getElementsByClassName("innerWhiteClockWrapper")[0];
    var startButton = document.getElementsByClassName("startbtn")[0];
    var continueButton = document.getElementsByClassName("continuebtn")[0];

    var toggleDiscButton = document.getElementById("toggleDiscBut");
    var discSection = document.getElementsByClassName("tech-discussion")[0];
    var toggleCredButton = document.getElementById("toggleCredBut");
    var credSection = document.getElementsByClassName("game-credits")[0];

    var inGameFlag = @ViewBag.inGame;

    //if still in a game (navigated here while within game), then allow option to restart or continue. Also show countdown timer.
    if (inGameFlag == 0) {
        startButton.innerHTML = "Start Game";
        continueButton.style.display = "none";
        countdownCtrl.style.display = "none";
        countdownCtrlBorder.style.display = "none";
    }
    else {
        startButton.innerHTML = "Restart";
        continueButton.style.display = "";
        countdownCtrl.style.display = "";
        countdownCtrlBorder.style.display = "";
    }

    var remaining = @ViewBag.remainingTime;

    var countDownDate = new Date();
    countDownDate.setMilliseconds(countDownDate.getMilliseconds() + remaining);

    // Update the countdown immediately and then every quarter of a second (otherwise it lags between page refresh and redirects)
    RunCountdown();
    var xInterval = setInterval(RunCountdown, 250);

    function RunCountdown() { //tbc add this as a central script.
        // Get todays date and time
        var now = new Date().getTime();

        // Find the duration between now and the count down date
        var duration = countDownDate - now;

        // Time calculations for days, hours, minutes and seconds
        //var days = Math.floor(duration / (1000 * 60 * 60 * 24));
        //var hours = Math.floor((duration % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        //var minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((duration % (1000 * 60)) / 1000);
        var formattedSeconds = seconds.toString().padStart(2, '0');

        // Display the result in the element with id="demo"
        countdownCtrl.innerHTML = formattedSeconds;

        // If the count down is finished, cancel the countdown
        if (duration < 0) {
            clearInterval(xInterval);
            countdownCtrl.innerHTML = "00";
        }
            }

    function ShowHideDiscussion() {

        if (toggleDiscButton.value == "Show Tech Discussion") {
            toggleDiscButton.value = "Hide Tech Discussion";
            discSection.style.display = "";
        }
        else {
            toggleDiscButton.value = "Show Tech Discussion";
            discSection.style.display = "none";
        }
    }

    function ShowHideCredits() {

        if (toggleCredButton.value == "Show Game Credits") {
            toggleCredButton.value = "Hide Game Credits";
            credSection.style.display = "";
        }
        else {
            toggleCredButton.value = "Show Game Credits";
            credSection.style.display = "none";
        }
    }

    </script>
</body>
</html>